name: Spring Boot Gradle CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adoptopenjdk'

      # Cache Gradle dependencies to speed up builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build the project using Gradle
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      # Run tests
      - name: Run tests
        run: ./gradlew test --no-daemon

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: success()

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Set up JDK 17 for deployment
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '17'
  #         distribution: 'adoptopenjdk'

  #     # Deploy to your server or cloud service
  #     # For example, if you're deploying to Heroku
  #     - name: Deploy to Heroku
  #       env:
  #         HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #       run: |
  #         git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
  #         git push heroku main

  #     # Optionally, you can add deployment steps for other services like AWS, Azure, etc.
